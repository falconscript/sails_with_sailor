<!DOCTYPE HTML><HTML xmlns="http://www.w3.org/1999/xhtml" lang="en-US">
<head>
	<title>Loading...</title>
	<meta name="description" content="x64 Projects GTunes GPics WikiRace iOS game music photos identification" />
	<meta name="keywords" content="GTunes GPics WikiRace Wiki Race Music Search Stream Download Playlist Playlists app for pc" />

    <!-- JSON.js for lacking browsers -->
	<script src="/js/JSON.js" type="text/javascript"></script>
	<!-- Jquery -->
	<script src="https://code.jquery.com/jquery-1.12.4.min.js" integrity="sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=" crossorigin="anonymous"></script>
	<!-- Global custom JS function helpers -->
	<script src="/js/commonGlobal.js" type="text/javascript"></script>
	<!-- Global custom cookie functions -->
	<script src="/js/CookieFunctions.js" type="text/javascript"></script>
	<!-- Twitter Bootstrap -->
	<link type="text/css" rel="stylesheet"
        href="/styles/bootstrap.3.3.6.min.css" />
  <script src="/js/dependencies/bootstrap.3.3.6.min.js"></script>

  <!-- Facebook ReactJS -->
	<script src="/js/dependencies/react-15.1.0.js"></script>
	<script src="/js/dependencies/react-dom-15.1.0.js"></script>
  <script src="/js/dependencies/browser.5.8.23.min.js"></script>

	<!-- Page specific scripts are at bottom -->

	<LINK rel="SHORTCUT ICON" href="http://i53.tinypic.com/2d8s4r8.jpg"> <!--For Page Icon-->


	<script type="text/javascript">
		/*
		 * Global templating assistance functions
		 * and setting up global environment variables
		 * to be used across all sites. "env" is the
		 * main variable to make these things easier
		 *
		 */

		if (top != self) top.location.href = self.location.href;

		var env = {};

		$(document).ready(function() {
		    // Set theme as well as app environment variables! Pumped in from session
		    env = {
					username: '{{ req.session.user.UserName }}',
					firstName: '{{ req.session.user.FirstName }}',
					lastName: '{{ req.session.user.LastName }}',
					id: '{{ req.session.user.personID }}',
					emailAddress: '{{ req.session.user.EmailAddress }}',
					// additional variables can be placed here
		    };


			// Set up logindiv viewing - BOOTSTRAP uses !important for some reason
			// therefore I have to override it with more power using the style attribute
			$(".collapse .loggedInGreeting")[
			     (env.username) ? "show" : "hide"]();
			$(".collapse .unregistered")[
			    (!env.username) ? "show" : "hide"]();


			$(".username").html(env.username); // this for backwards compatibility

			// Templating into the page based on env to easily set values.
			// Would be wise to change this to 2-way binding with library such as Angular/React
			$.each(env, function(key, val) {
    			$(".session_" + key).text(val);
			});

      // Show more neatly now
      $('.navbar .collapse').css("visibility", "visible");
		});

	</script>

    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->
</head>
<body>

<!-- Viewport mobile tag for sensible mobile support -->
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


<!--
    Stylesheets and Preprocessors
    ==============================

    You can always bring in CSS files manually with `<link>` tags, or asynchronously
    using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
    of Sails' conventional asset pipeline (boilerplate Gruntfile).

    By default, stylesheets from your `assets/styles` folder are included
    here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
    are supported. In production, your styles will be minified and concatenated into
    a single file.

    To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
    For example, here are a few things you could do:

        + Change the order of your CSS files
        + Import stylesheets from other directories
        + Use a different or additional preprocessor, like SASS, SCSS or Stylus
-->

<!--STYLES-->
<link rel="stylesheet" href="/styles/importer.css">
<!--STYLES END-->

<!-- Custom CSS -->
<link href="/css/homepage.css" rel="stylesheet">

<!-- Custom Fonts -->
<link href="/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">

<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
    <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
    <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->

<!-- Header - Navigation -->
<!-- removed navbar-inverse for light color ALSO starts hidden to render neater -->
<div class="navbarWrapper">
	<nav class="navbar navbar-inverse navbar-fixed-top" id="topNavBar" role="navigation">

	    <div class="container">
	        <!-- Brand and toggle get grouped for better mobile display -->
	        <div class="navbar-header">
	            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
	                <span class="sr-only">Toggle navigation</span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	                <span class="icon-bar"></span>
	            </button>
	            <a class="navbar-brand" href="/">Home</a>
	        </div>

	        <!-- Header Nav Links - Unregistered -->
	        <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1" style="visibility:hidden;">
	            <ul class="nav navbar-nav navbar-right unregistered">
	                <li>
	                    <a href="/termsAndContact">Terms</a>
	                </li>
	                <li>
	                    <a href="/termsAndContact">Contact</a>
	                </li>

	                <li>
	                    <a href="/view_registration_form">Register</a>
	                </li>
	                <li>
	                    <a href="/login">Sign in</a>
	                </li>
	            </ul>

							<!-- Header Nav Links - Logged In -->
	            <ul class="nav navbar-nav navbar-right loggedInGreeting">
	                <li>
	                    <a href="/termsAndContact">Terms</a>
	                </li>
	                <li>
	                    <a href="/termsAndContact">Contact</a>
	                </li>

	                <li class="dropdown">
	                    <a href="#" class="dropdown-toggle" data-toggle="dropdown">
	                        <span class="username">Loading...</span><b class="caret"></b></a>
	                    <ul class="dropdown-menu">
	                        <li>
	                            <a href="/view_profile">Profile</a>
	                        </li>
	                        <li>
	                            <a href="/login_or_out_action">Logout</a>
	                        </li>
	                    </ul>

	                </li>
	            </ul>

	        </div>

	        <!-- /.navbar-collapse -->
	    </div>
	    <!-- /.container -->
	</nav>
</div>

    {{{ body }}}



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->

    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/CookieFunctions.js"></script>
    <script src="/js/JSON.js"></script>
    <script src="/js/commonGlobal.js"></script>
    <script src="/js/xdRequest.js"></script>



		<!-- googs analytics -->>
		<script>
		  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
		  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
		  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
		  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

		  ga('create', 'UA-81694388-1', 'auto');
		  ga('send', 'pageview');

		</script>

    <!--SCRIPTS END-->
  </body>
</html>
